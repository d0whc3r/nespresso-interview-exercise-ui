// Your code here

$selectedBg: #0b0d18;
$colorBg: #131526;
$wavesHeight: 7rem;

* {
  box-sizing: border-box;
}

.wave {
  background-image: url("data:image/svg+xml,%3C%3Fxml version='1.0' encoding='utf-8'%3F%3E%3C!-- Generator: Adobe Illustrator 21.1.0, SVG Export Plug-In . SVG Version: 6.00 Build 0) --%3E%3Csvg version='1.1' id='Layer_1' xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink' x='0px' y='0px' viewBox='0 0 1600 198' style='enable-background:new 0 0 1600 198;' xml:space='preserve'%3E%3Cstyle type='text/css'%3E .st0%7Bfill:url(%23SVGID_1_);%7D%0A%3C/style%3E%3ClinearGradient id='SVGID_1_' gradientUnits='userSpaceOnUse' x1='320.6993' y1='377.5869' x2='320.7004' y2='378.692' gradientTransform='matrix(-1600 0 0 -198.0004 513920 75060.1484)'%3E%3Cstop offset='1.805556e-02' style='stop-color:%233141BE'/%3E%3Cstop offset='0.4847' style='stop-color:%235F5BD5'/%3E%3Cstop offset='0.8708' style='stop-color:%238545C5'/%3E%3Cstop offset='0.9917' style='stop-color:%239A39BC'/%3E%3C/linearGradient%3E%3Cpath class='st0' d='M1600,121c-121.2,0-257-32.4-347-31c-130,2-195.2,62.8-440,63C636,153,536,41,417,41c-98,0-255.9,80-417,80v77 h1600C1600,198,1600,150,1600,121z'/%3E%3C/svg%3E%0A");
  position: absolute;
  width: 200%;
  height: 100%;
  animation: wave 10s -3s linear infinite;
  transform: translate3d(0, 0, 0);
  opacity: 0.8;

  &:nth-of-type(2) {
    bottom: 0;
    animation: wave 18s linear reverse infinite;
    opacity: 0.5;
  }

  &:nth-of-type(3) {
    bottom: 0;
    animation: wave 20s -1s linear infinite;
    opacity: 0.5;
  }
}

.waves {
  height: $wavesHeight;
  width: 100%;
  position: fixed;
  bottom: 0;
  left: 0;
  right: 0;
  overflow-x: hidden;
}

@keyframes wave {
  0% {
    transform: translateX(0);
  }
  50% {
    transform: translateX(-25%);
  }
  100% {
    transform: translateX(-50%);
  }
}

body {
  font-family: 'Roboto', sans-serif;
  margin: 0;
  padding: 1.5rem 0;
  background: $colorBg;
  color: white;
}

h1 {
  margin: 0.5rem 0;
  padding: 0;
}

h2 {
  margin: 0;
  padding: 0;
  font-weight: 300;
}

p {
  font-weight: 300;
}

ul {
  list-style: none;
  padding: 0;
  margin: 0;
}

b {
  font-weight: bold;
}

.wrapper {
  display: flex;
  width: 100%;
  justify-content: center;
  align-items: center;

  @media screen and (max-width: 480px) {
    padding: 1rem 1rem 0 1rem;
  }
}

.overlay {
  height: calc($wavesHeight + 3rem);
}

.coffee-specs {
  @media screen and (min-width: 480px) {
    visibility: hidden;
  }
  display: inherit !important;
  padding: 0.5rem;

  > ul li {
    display: flex;
    flex-direction: row;
    justify-content: space-between;
    align-items: center;

    > li {
      display: flex;
      justify-content: flex-start;
    }

    ul {
      @media screen and (max-width: 480px) {
        display: none;
      }
      display: flex;
      flex-direction: row;
      justify-content: flex-end;

      li:last-child {
        margin-left: 1rem;
      }
    }
  }

  @media screen and (max-width: 480px) {
    margin: 1.5rem;
    padding: 0.5rem;
  }

  h3 {
    text-transform: uppercase;
    font-weight: 300;

    span {
      font-weight: bold;
    }
  }

  #fetched-data {
    ul {
      display: flex;
      flex-direction: column;
      justify-content: flex-start;
      align-items: flex-start;
      gap: 0.2rem;
    }
  }
}

.capsule-information div:nth-child(2) {
  display: flex;
  width: auto;
  height: auto;
  padding: 0.5rem;

  @media screen and (max-width: 480px) {
    justify-content: center;
  }

  @media screen and (min-width: 480px) {
    &:hover {
      background: $selectedBg;
    }
  }

  &:hover + .coffee-specs {
    background: $selectedBg;
    visibility: visible;
  }
}

.capsule-information {
  display: grid;
  grid-template-columns: repeat(2, 1fr);
  grid-template-rows: repeat(3, 1fr);
  grid-column-gap: 5px;
  grid-row-gap: 10px;

  @media screen and (max-width: 480px) {
    margin: 0 auto;

    p {
      display: none;
    }
  }

  &:nth-child(1) {
    grid-area: 1 / 1 / 2 / 2;
  }

  &:nth-child(2) {
    grid-area: 1 / 2 / 2 / 3;
  }

  &:nth-child(3) {
    grid-area: 2 / 1 / 3 / 3;
  }

  &:nth-child(4) {
    grid-area: 3 / 1 / 4 / 3;
  }
}
